// Code generated by moshi-kotlin-codegen. Do not edit.
package xyz.ragunath

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class BookJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Book>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "author")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val authorAdapter: JsonAdapter<Author> = moshi.adapter(Author::class.java, emptySet(),
      "author")

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Book").append(')') }

  public override fun fromJson(reader: JsonReader): Book {
    var title: String? = null
    var author: Author? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> author = authorAdapter.fromJson(reader) ?: throw Util.unexpectedNull("author",
            "author", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Book(
        title = title ?: throw Util.missingProperty("title", "title", reader),
        author = author ?: throw Util.missingProperty("author", "author", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Book?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("author")
    authorAdapter.toJson(writer, value_.author)
    writer.endObject()
  }
}
